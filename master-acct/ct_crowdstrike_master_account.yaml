AWSTemplateFormatVersion: '2010-09-09'
Description: Control Tower Lifecycle Events
Parameters:
  FalconClientId:
    Description: Your Falcon Oauth2 API Key.
    NoEcho: 'true'
    Type: String

  FalconSecret:
    Description: Your Falcon Oauth2 API Secret.
    NoEcho: 'true'
    Type: String

  ExternalId:
    Description: ExternalID Used for authenticating assume role requests.
    NoEcho: 'true'
    Type: String

  CSAccountNumber:
    Default: '292230061137'
    Description: Crowdstrike Account ID.
    Type: String
  LambdaBucketName:
    Type: String
    Description: Name of the S3 bucket that contains your lambda functions

  RoleName:
    Description: IAM Role Name (May be modified)
    Type: String
    Default: CrowdStrikeFalcon
  CSAssumingRoleName:
    Type: String
    Description: Assuming IAM Role Name
    Default: CS-Prod-HG-CsCloudconnectaws
  LogArchiveAccount:
    Type: String
    Description: AccountId of Log Archive Bucket

  LogArchiveBucketName:
    Type: String
    Description: Log Archive Bucket Name

  LogArchiveBucketRegion:
    Type: String
    Description: Log Archive Bucket Region



Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Crowdstrike Account Parameters. (Do Not Modify)
        Parameters:
          - CSAccountNumber
          - CSAssumingRoleName
      - Label:
          default: Crowdstrike Role Parameters.
        Parameters:
          - RoleName
          - ExternalId
      - Label:
          default: Crowdstrike Falcom API keys.
        Parameters:
           - FalconClientId
           - FalconSecret
      - Label:
          default: Log Archive Account Details
        Parameters:
          - LogArchiveAccount
          - LogArchiveBucketName
          - LogArchiveBucketRegion
Resources:
  CrowdstrikeCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Crowdstrike Credentials
      Name: CrowdstrikeAPISecret
      SecretString:
        Fn::Join:
        - ''
        - - '{"FalconClientId":"'
          - Ref: FalconClientId
          - '","FalconSecret": "'
          - Ref: FalconSecret
          - '"}'
  FalconDiscoverCredentialsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FalconDiscoverCredentialsRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: Assume_Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: '*'
        - PolicyName: Get_Values
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor1
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref CrowdstrikeCredentials
        - PolicyName: List_secrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - secretsmanager:ListSecrets
              Resource: '*'
        - PolicyName: Pass_Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor3
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !Join [':', ['arn:aws:iam:', !Ref "AWS::AccountId", 'role/service-role/AWSControlTowerStackSetRole']]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess

  launchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: launchLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: Get_Values
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor1
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref CrowdstrikeCredentials
        - PolicyName: List_secrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - secretsmanager:ListSecrets
              Resource: '*'
        - PolicyName: CloudFormation_ops
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - cloudformation:CreateStackSet
                - cloudformation:CreateStackInstances
                - cloudformation:DescribeStackSet
                - cloudformation:ListStackInstances
                - cloudformation:DeleteStackInstances
                - cloudformation:DeleteStackSet
              Resource: !Join [':', ['arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/*:*']]
        - PolicyName: Pass_Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor3
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !Join [':', ['arn:aws:iam:', !Ref "AWS::AccountId", 'role/service-role/AWSControlTowerStackSetRole']]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  permissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "LambdaToLaunchStackSet.Arn"
      Principal: cloudformation.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"

  LambdaToLaunchStackSet:
    DependsOn:
      - "launchLambdaRole"
      - CrowdstrikeCredentials
    Type: 'AWS::Lambda::Function'
    DeletionPolicy: Delete
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: create_stackset_lambda.zip
      Layers:
        - !Ref lambdaLayer
      Environment:
        Variables:
          AwsRegion: !Ref AWS::Region
          FalconDiscoverSecretsRole: !GetAtt "FalconDiscoverCredentialsRole.Arn"
          LogArchiveAccount: !Ref LogArchiveAccount
          LogArchiveBucketName: !Ref LogArchiveBucketName
          LogArchiveBucketRegion: !Ref LogArchiveBucketRegion
          RoleName : !Ref RoleName
          CSAccountNumber: !Ref CSAccountNumber
          CSAssumingRoleName: !Ref CSAssumingRoleName
          LambdaBucketName: !Ref LambdaBucketName
          CrowdstrikeCredentialsSecret: !Ref CrowdstrikeCredentials
      Handler: create_stackset_lambda.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Role: !GetAtt "launchLambdaRole.Arn"
      Timeout: 180
  TriggerLambda:
    Type: 'Custom::TriggerLambda'
    DependsOn:
      - LambdaToLaunchStackSet
      - "launchLambdaRole"
      - permissionForEventsToInvokeLambda
    Properties:
      FalconSecret: !Ref FalconSecret
      FalconClientId: !Ref FalconClientId
      ServiceToken: !GetAtt
        - LambdaToLaunchStackSet
        - Arn
  lambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref LambdaBucketName
        S3Key: layer.zip
      Description: Layer for requests package
      LayerName: requests-package

  CaptureControlTowerLifeCycleEvents:
    DependsOn:
    - TriggerCustomizationsOnLifeCycleEvent
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events and Trigger an Action
      EventPattern:
        detail:
          eventName:
          - CreateManagedAccount
          - UpdateManagedAccount
          - EnableGuardrail
          - DisableGuardrail
          - SetupLandingZone
          - UpdateLandingZone
          - RegisterOrganizationalUnit
          - DeregisterOrganizationalUnit
          eventSource:
          - controltower.amazonaws.com
        detail-type:
        - AWS Service Event via CloudTrail
        source:
        - aws.controltower
      Name: CaptureControlTowerLifeCycleEvents
      State: ENABLED
      Targets:
      - Arn: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
        Id: IDCaptureControlTowerLifeCycleEvents

  LambdaRoleToCaptureEvents:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRoleToCaptureEvents
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStackInstances'
                Resource: !Join [':',['arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/*:*']]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TriggerCustomizationsOnLifeCycleEvent:
    DependsOn:
    - LambdaRoleToCaptureEvents
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: crowdstrikeAccts_lambda.zip
      Layers:
        - !Ref lambdaLayer
      Environment:
        Variables:
          RoleName: !Ref RoleName
          CSAccountNumber: !Ref CSAccountNumber
          CSAssumingRoleName: !Ref CSAssumingRoleName
      Handler: crowdstrikeAccts_lambda.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaRoleToCaptureEvents.Arn"
      Runtime: python3.7
      Timeout: 60

  PermissionForEventsToInvokeLambdachk:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "CaptureControlTowerLifeCycleEvents.Arn"
