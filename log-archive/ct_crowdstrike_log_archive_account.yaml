AWSTemplateFormatVersion: '2010-09-09'
Description: For public release - This template sets up a cross account IAM role in order to enable CrowdStrike Falcon Discover For
  AWS functionality.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Cross Account IAM Role.
        Parameters:
          - RoleName
          - ExternalID
          - CSAccountNumber
          - CSAssumingRoleName
      - Label:
          default: Crowdstrike Falcom API keys.
          Parameters:
            - FalconClientId
            - FalconSecret
      - Label:
          default: S3 Buckets.
          Parameters:
            - LogArchiveBucketName
            - LambdaBucketName
    ParameterLabels:
      LogArchiveBucketName:
        default: Cloudtrail log bucket from Control Tower
      RoleName:
        default: IAM Role Name
      ExternalID:
        default: External ID Enter 6 or more characters alphanumeric without white space
      CSAccountNumber:
        default: Crowdstrke AWS Account ID we are granting access to the role. Do not modify
      CSAssumingRoleName:
        default: Crowdstrike Role we are granting access to the role.  Do not modify
Outputs:
  RoleARN:
    Description: The ARN of the role that can be assumed by the other account.
    Value: !GetAtt 'S3AccessiamRole.Arn'
Parameters:

  RoleName:
    Description: The name of the cross account IAM role to be created.
    MinLength: '1'
    Type: String
    Default: FalconDiscover1

  ExternalID:
    Description: String used in IAM role trust policy to designate who can assume the role we are creating.
    MinLength: '6'
    Type: String


  CSAccountNumber:
    AllowedPattern: '[0-9]+'
    Description: The 12 digit AWS account number to grant access to. Do not modify
    MaxLength: '12'
    MinLength: '12'
    Type: String
    Default: 292230061137

  CSAssumingRoleName:
    Description: Name of the IAM role used within CrowdStrike to assume access to. Do not modify
      your account.
    Type: String
    Default: "CS-Prod-HG-CsCloudconnectaws"

  FalconClientId:
    Description: Falcon OAuth2 Client ID.
    Type: String


  FalconSecret:
    Description: Falcon Oath2 API secret.
    Type: String

  LogArchiveBucketName:
    Type: String
    Description: Log Archive Bucket Name

  LambdaBucketName:
    Type: String


Resources:

  launchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrowdstrikelaunchLambdaRole1
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: Get_Values
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor1
              Effect: Allow
              Action:
                - s3:PutBucketNotification
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref LogArchiveBucketName

  lambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref LambdaBucketName
        S3Key: layer.zip
      Description: Layer for requests package
      LayerName: requests-package

  AddNotificationToBucket:
    DependsOn:
      - launchLambdaRole
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          central_s3_bucket_account: !Ref AWS::AccountId
          cloudtrail_bucket_region: !Ref AWS::Region
          CSAccountNumber: !Ref CSAccountNumber
          CSAssumingRoleName: !Ref CSAssumingRoleName
          FalconClientId: !Ref FalconClientId
          FalconSecret: !Ref FalconSecret
          LocalAccount: !Ref AWS::AccountId

      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: add_S3_notification.zip
      Layers:
        - !Ref lambdaLayer
      Handler: add_S3_notification.lambda_handler
      MemorySize: 128

      Role: !GetAtt launchLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60

  TriggerAddNotificationLambda:
    Type: 'Custom::TriggerLambda'
    DependsOn: AddNotificationToBucket
    Properties:
      FalconSecret: !Ref FalconSecret
      FalconClientId: !Ref FalconClientId
      log_archive_acct: !Ref AWS::AccountId
      region: !Ref AWS::Region
      log_archive_bucket: !Ref LogArchiveBucketName
      crwd_topic_arn: !Join
          - ''
          - - 'arn:aws:sns:'
            - !Ref 'AWS::Region'
            - ':292230061137:cs-cloudconnect-aws-cloudtrail'
      ServiceToken: !GetAtt
        - AddNotificationToBucket
        - Arn


  S3AccessiamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref 'RoleName'
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref 'ExternalID'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'CSAccountNumber'
                  - :role/
                  - !Ref 'CSAssumingRoleName'
            Sid: ''
        Version: '2012-10-17'
      Path: /
  iamPolicyCloudTrailS3Access:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ReadS3CloudTrailFiles
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'LogArchiveBucketName'
            Sid: ''
        Version: '2012-10-17'
      Roles:
        - !Ref 'S3AccessiamRole'
    DependsOn:
      - S3AccessiamRole

  RegisterAcctLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrowdstrikeRegisterAcctLambdaRole1
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess

  TriggerLambda:
    Type: 'Custom::TriggerLambda'
    DependsOn:
      - "RegisterAcctLambdaRole"
      - "RegisterAccountWithDiscover"
    Properties:
      FalconSecret: !Ref FalconSecret
      FalconClientId: !Ref FalconClientId
      ExternalID: !Ref ExternalID
      ServiceToken: !GetAtt
        - RegisterAccountWithDiscover
        - Arn

  RegisterAccountWithDiscover:
    DependsOn:
      - "RegisterAcctLambdaRole"
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          central_s3_bucket_account: !Ref AWS::AccountId
          cloudtrail_bucket_region: !Ref AWS::Region
          iam_role_arn: !GetAtt "S3AccessiamRole.Arn"
          CSAccountNumber: !Ref CSAccountNumber
          CSAssumingRoleName: !Ref CSAssumingRoleName
          LocalAccount: !Ref AWS::AccountId

      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: register_logarchive_account.zip
      Layers:
        - !Ref lambdaLayer
      Handler: register_logarchive_account.lambda_handler
      MemorySize: 128
      Role: !GetAtt RegisterAcctLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
